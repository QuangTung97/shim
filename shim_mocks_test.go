// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package shim

import (
	"sync"
)

// Ensure, that PartitionRunnerMock does implement PartitionRunner.
// If this is not the case, regenerate this file with moq.
var _ PartitionRunner = &PartitionRunnerMock{}

// PartitionRunnerMock is a mock implementation of PartitionRunner.
//
// 	func TestSomethingThatUsesPartitionRunner(t *testing.T) {
//
// 		// make and configure a mocked PartitionRunner
// 		mockedPartitionRunner := &PartitionRunnerMock{
// 			StartFunc: func(partition PartitionID, startCompleted func())  {
// 				panic("mock out the Start method")
// 			},
// 			StopFunc: func(partition PartitionID, stopCompleted func())  {
// 				panic("mock out the Stop method")
// 			},
// 		}
//
// 		// use mockedPartitionRunner in code that requires PartitionRunner
// 		// and then make assertions.
//
// 	}
type PartitionRunnerMock struct {
	// StartFunc mocks the Start method.
	StartFunc func(partition PartitionID, startCompleted func())

	// StopFunc mocks the Stop method.
	StopFunc func(partition PartitionID, stopCompleted func())

	// calls tracks calls to the methods.
	calls struct {
		// Start holds details about calls to the Start method.
		Start []struct {
			// Partition is the partition argument value.
			Partition PartitionID
			// StartCompleted is the startCompleted argument value.
			StartCompleted func()
		}
		// Stop holds details about calls to the Stop method.
		Stop []struct {
			// Partition is the partition argument value.
			Partition PartitionID
			// StopCompleted is the stopCompleted argument value.
			StopCompleted func()
		}
	}
	lockStart sync.RWMutex
	lockStop  sync.RWMutex
}

// Start calls StartFunc.
func (mock *PartitionRunnerMock) Start(partition PartitionID, startCompleted func()) {
	if mock.StartFunc == nil {
		panic("PartitionRunnerMock.StartFunc: method is nil but PartitionRunner.Start was just called")
	}
	callInfo := struct {
		Partition      PartitionID
		StartCompleted func()
	}{
		Partition:      partition,
		StartCompleted: startCompleted,
	}
	mock.lockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	mock.lockStart.Unlock()
	mock.StartFunc(partition, startCompleted)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedPartitionRunner.StartCalls())
func (mock *PartitionRunnerMock) StartCalls() []struct {
	Partition      PartitionID
	StartCompleted func()
} {
	var calls []struct {
		Partition      PartitionID
		StartCompleted func()
	}
	mock.lockStart.RLock()
	calls = mock.calls.Start
	mock.lockStart.RUnlock()
	return calls
}

// Stop calls StopFunc.
func (mock *PartitionRunnerMock) Stop(partition PartitionID, stopCompleted func()) {
	if mock.StopFunc == nil {
		panic("PartitionRunnerMock.StopFunc: method is nil but PartitionRunner.Stop was just called")
	}
	callInfo := struct {
		Partition     PartitionID
		StopCompleted func()
	}{
		Partition:     partition,
		StopCompleted: stopCompleted,
	}
	mock.lockStop.Lock()
	mock.calls.Stop = append(mock.calls.Stop, callInfo)
	mock.lockStop.Unlock()
	mock.StopFunc(partition, stopCompleted)
}

// StopCalls gets all the calls that were made to Stop.
// Check the length with:
//     len(mockedPartitionRunner.StopCalls())
func (mock *PartitionRunnerMock) StopCalls() []struct {
	Partition     PartitionID
	StopCompleted func()
} {
	var calls []struct {
		Partition     PartitionID
		StopCompleted func()
	}
	mock.lockStop.RLock()
	calls = mock.calls.Stop
	mock.lockStop.RUnlock()
	return calls
}

// Ensure, that NodeDelegateMock does implement NodeDelegate.
// If this is not the case, regenerate this file with moq.
var _ NodeDelegate = &NodeDelegateMock{}

// NodeDelegateMock is a mock implementation of NodeDelegate.
//
// 	func TestSomethingThatUsesNodeDelegate(t *testing.T) {
//
// 		// make and configure a mocked NodeDelegate
// 		mockedNodeDelegate := &NodeDelegateMock{
// 			JoinFunc: func(addrs []string) error {
// 				panic("mock out the Join method")
// 			},
// 			LeaveFunc: func()  {
// 				panic("mock out the Leave method")
// 			},
// 		}
//
// 		// use mockedNodeDelegate in code that requires NodeDelegate
// 		// and then make assertions.
//
// 	}
type NodeDelegateMock struct {
	// JoinFunc mocks the Join method.
	JoinFunc func(addrs []string) error

	// LeaveFunc mocks the Leave method.
	LeaveFunc func()

	// calls tracks calls to the methods.
	calls struct {
		// Join holds details about calls to the Join method.
		Join []struct {
			// Addrs is the addrs argument value.
			Addrs []string
		}
		// Leave holds details about calls to the Leave method.
		Leave []struct {
		}
	}
	lockJoin  sync.RWMutex
	lockLeave sync.RWMutex
}

// Join calls JoinFunc.
func (mock *NodeDelegateMock) Join(addrs []string) error {
	if mock.JoinFunc == nil {
		panic("NodeDelegateMock.JoinFunc: method is nil but NodeDelegate.Join was just called")
	}
	callInfo := struct {
		Addrs []string
	}{
		Addrs: addrs,
	}
	mock.lockJoin.Lock()
	mock.calls.Join = append(mock.calls.Join, callInfo)
	mock.lockJoin.Unlock()
	return mock.JoinFunc(addrs)
}

// JoinCalls gets all the calls that were made to Join.
// Check the length with:
//     len(mockedNodeDelegate.JoinCalls())
func (mock *NodeDelegateMock) JoinCalls() []struct {
	Addrs []string
} {
	var calls []struct {
		Addrs []string
	}
	mock.lockJoin.RLock()
	calls = mock.calls.Join
	mock.lockJoin.RUnlock()
	return calls
}

// Leave calls LeaveFunc.
func (mock *NodeDelegateMock) Leave() {
	if mock.LeaveFunc == nil {
		panic("NodeDelegateMock.LeaveFunc: method is nil but NodeDelegate.Leave was just called")
	}
	callInfo := struct {
	}{}
	mock.lockLeave.Lock()
	mock.calls.Leave = append(mock.calls.Leave, callInfo)
	mock.lockLeave.Unlock()
	mock.LeaveFunc()
}

// LeaveCalls gets all the calls that were made to Leave.
// Check the length with:
//     len(mockedNodeDelegate.LeaveCalls())
func (mock *NodeDelegateMock) LeaveCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockLeave.RLock()
	calls = mock.calls.Leave
	mock.lockLeave.RUnlock()
	return calls
}

// Ensure, that nodeListenerMock does implement nodeListener.
// If this is not the case, regenerate this file with moq.
var _ nodeListener = &nodeListenerMock{}

// nodeListenerMock is a mock implementation of nodeListener.
//
// 	func TestSomethingThatUsesnodeListener(t *testing.T) {
//
// 		// make and configure a mocked nodeListener
// 		mockednodeListener := &nodeListenerMock{
// 			onChangeFunc: func(nodes []string)  {
// 				panic("mock out the onChange method")
// 			},
// 			onJoinCompletedFunc: func()  {
// 				panic("mock out the onJoinCompleted method")
// 			},
// 		}
//
// 		// use mockednodeListener in code that requires nodeListener
// 		// and then make assertions.
//
// 	}
type nodeListenerMock struct {
	// onChangeFunc mocks the onChange method.
	onChangeFunc func(nodes []string)

	// onJoinCompletedFunc mocks the onJoinCompleted method.
	onJoinCompletedFunc func()

	// calls tracks calls to the methods.
	calls struct {
		// onChange holds details about calls to the onChange method.
		onChange []struct {
			// Nodes is the nodes argument value.
			Nodes []string
		}
		// onJoinCompleted holds details about calls to the onJoinCompleted method.
		onJoinCompleted []struct {
		}
	}
	lockonChange        sync.RWMutex
	lockonJoinCompleted sync.RWMutex
}

// onChange calls onChangeFunc.
func (mock *nodeListenerMock) onChange(nodes []string) {
	if mock.onChangeFunc == nil {
		panic("nodeListenerMock.onChangeFunc: method is nil but nodeListener.onChange was just called")
	}
	callInfo := struct {
		Nodes []string
	}{
		Nodes: nodes,
	}
	mock.lockonChange.Lock()
	mock.calls.onChange = append(mock.calls.onChange, callInfo)
	mock.lockonChange.Unlock()
	mock.onChangeFunc(nodes)
}

// onChangeCalls gets all the calls that were made to onChange.
// Check the length with:
//     len(mockednodeListener.onChangeCalls())
func (mock *nodeListenerMock) onChangeCalls() []struct {
	Nodes []string
} {
	var calls []struct {
		Nodes []string
	}
	mock.lockonChange.RLock()
	calls = mock.calls.onChange
	mock.lockonChange.RUnlock()
	return calls
}

// onJoinCompleted calls onJoinCompletedFunc.
func (mock *nodeListenerMock) onJoinCompleted() {
	if mock.onJoinCompletedFunc == nil {
		panic("nodeListenerMock.onJoinCompletedFunc: method is nil but nodeListener.onJoinCompleted was just called")
	}
	callInfo := struct {
	}{}
	mock.lockonJoinCompleted.Lock()
	mock.calls.onJoinCompleted = append(mock.calls.onJoinCompleted, callInfo)
	mock.lockonJoinCompleted.Unlock()
	mock.onJoinCompletedFunc()
}

// onJoinCompletedCalls gets all the calls that were made to onJoinCompleted.
// Check the length with:
//     len(mockednodeListener.onJoinCompletedCalls())
func (mock *nodeListenerMock) onJoinCompletedCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockonJoinCompleted.RLock()
	calls = mock.calls.onJoinCompleted
	mock.lockonJoinCompleted.RUnlock()
	return calls
}
