// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package shim

import (
	"sync"
)

// Ensure, that PartitionRunnerMock does implement PartitionRunner.
// If this is not the case, regenerate this file with moq.
var _ PartitionRunner = &PartitionRunnerMock{}

// PartitionRunnerMock is a mock implementation of PartitionRunner.
//
// 	func TestSomethingThatUsesPartitionRunner(t *testing.T) {
//
// 		// make and configure a mocked PartitionRunner
// 		mockedPartitionRunner := &PartitionRunnerMock{
// 			StartFunc: func(partition PartitionID, finish func())  {
// 				panic("mock out the Start method")
// 			},
// 			StopFunc: func()  {
// 				panic("mock out the Stop method")
// 			},
// 		}
//
// 		// use mockedPartitionRunner in code that requires PartitionRunner
// 		// and then make assertions.
//
// 	}
type PartitionRunnerMock struct {
	// StartFunc mocks the Start method.
	StartFunc func(partition PartitionID, finish func())

	// StopFunc mocks the Stop method.
	StopFunc func()

	// calls tracks calls to the methods.
	calls struct {
		// Start holds details about calls to the Start method.
		Start []struct {
			// Partition is the partition argument value.
			Partition PartitionID
			// Finish is the finish argument value.
			Finish func()
		}
		// Stop holds details about calls to the Stop method.
		Stop []struct {
		}
	}
	lockStart sync.RWMutex
	lockStop  sync.RWMutex
}

// Start calls StartFunc.
func (mock *PartitionRunnerMock) Start(partition PartitionID, finish func()) {
	if mock.StartFunc == nil {
		panic("PartitionRunnerMock.StartFunc: method is nil but PartitionRunner.Start was just called")
	}
	callInfo := struct {
		Partition PartitionID
		Finish    func()
	}{
		Partition: partition,
		Finish:    finish,
	}
	mock.lockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	mock.lockStart.Unlock()
	mock.StartFunc(partition, finish)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedPartitionRunner.StartCalls())
func (mock *PartitionRunnerMock) StartCalls() []struct {
	Partition PartitionID
	Finish    func()
} {
	var calls []struct {
		Partition PartitionID
		Finish    func()
	}
	mock.lockStart.RLock()
	calls = mock.calls.Start
	mock.lockStart.RUnlock()
	return calls
}

// Stop calls StopFunc.
func (mock *PartitionRunnerMock) Stop() {
	if mock.StopFunc == nil {
		panic("PartitionRunnerMock.StopFunc: method is nil but PartitionRunner.Stop was just called")
	}
	callInfo := struct {
	}{}
	mock.lockStop.Lock()
	mock.calls.Stop = append(mock.calls.Stop, callInfo)
	mock.lockStop.Unlock()
	mock.StopFunc()
}

// StopCalls gets all the calls that were made to Stop.
// Check the length with:
//     len(mockedPartitionRunner.StopCalls())
func (mock *PartitionRunnerMock) StopCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockStop.RLock()
	calls = mock.calls.Stop
	mock.lockStop.RUnlock()
	return calls
}

// Ensure, that NodeDelegateMock does implement NodeDelegate.
// If this is not the case, regenerate this file with moq.
var _ NodeDelegate = &NodeDelegateMock{}

// NodeDelegateMock is a mock implementation of NodeDelegate.
//
// 	func TestSomethingThatUsesNodeDelegate(t *testing.T) {
//
// 		// make and configure a mocked NodeDelegate
// 		mockedNodeDelegate := &NodeDelegateMock{
// 			JoinFunc: func(addrs []string, finish func())  {
// 				panic("mock out the Join method")
// 			},
// 			LeaseFunc: func()  {
// 				panic("mock out the Lease method")
// 			},
// 		}
//
// 		// use mockedNodeDelegate in code that requires NodeDelegate
// 		// and then make assertions.
//
// 	}
type NodeDelegateMock struct {
	// JoinFunc mocks the Join method.
	JoinFunc func(addrs []string, finish func())

	// LeaseFunc mocks the Lease method.
	LeaseFunc func()

	// calls tracks calls to the methods.
	calls struct {
		// Join holds details about calls to the Join method.
		Join []struct {
			// Addrs is the addrs argument value.
			Addrs []string
			// Finish is the finish argument value.
			Finish func()
		}
		// Lease holds details about calls to the Lease method.
		Lease []struct {
		}
	}
	lockJoin  sync.RWMutex
	lockLease sync.RWMutex
}

// Join calls JoinFunc.
func (mock *NodeDelegateMock) Join(addrs []string, finish func()) {
	if mock.JoinFunc == nil {
		panic("NodeDelegateMock.JoinFunc: method is nil but NodeDelegate.Join was just called")
	}
	callInfo := struct {
		Addrs  []string
		Finish func()
	}{
		Addrs:  addrs,
		Finish: finish,
	}
	mock.lockJoin.Lock()
	mock.calls.Join = append(mock.calls.Join, callInfo)
	mock.lockJoin.Unlock()
	mock.JoinFunc(addrs, finish)
}

// JoinCalls gets all the calls that were made to Join.
// Check the length with:
//     len(mockedNodeDelegate.JoinCalls())
func (mock *NodeDelegateMock) JoinCalls() []struct {
	Addrs  []string
	Finish func()
} {
	var calls []struct {
		Addrs  []string
		Finish func()
	}
	mock.lockJoin.RLock()
	calls = mock.calls.Join
	mock.lockJoin.RUnlock()
	return calls
}

// Lease calls LeaseFunc.
func (mock *NodeDelegateMock) Lease() {
	if mock.LeaseFunc == nil {
		panic("NodeDelegateMock.LeaseFunc: method is nil but NodeDelegate.Lease was just called")
	}
	callInfo := struct {
	}{}
	mock.lockLease.Lock()
	mock.calls.Lease = append(mock.calls.Lease, callInfo)
	mock.lockLease.Unlock()
	mock.LeaseFunc()
}

// LeaseCalls gets all the calls that were made to Lease.
// Check the length with:
//     len(mockedNodeDelegate.LeaseCalls())
func (mock *NodeDelegateMock) LeaseCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockLease.RLock()
	calls = mock.calls.Lease
	mock.lockLease.RUnlock()
	return calls
}
